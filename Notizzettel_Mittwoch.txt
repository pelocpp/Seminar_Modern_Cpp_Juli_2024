=====================================

Guten Morgen

C++ für Fortgeschrittene

Mittwoch

Peter Loos

=====================================

Ablauf:

== Variadic Templates
== std::generic

== Mittagspause: Übungsteil

=====================================

C++ 11 :

Variadic Templates: 

>>> Sehen, Anwenden (std::make_unique)

>>> Selbst schreiben

-------------------------------------

C++:        Bjarne Stroustrup  :  C with Classes

Templates:  Alexander Stepanov:   Generische Programming

Bjarne Stroustrup  ==> STL Standard Template Library

===================================================

Argumente:

Nomenklatur:   "Viele Parameter" ==> Parameter Pack

Pack ==> kreieren 
Pack ==> auspacken

SYNTAX: Was bedeutet auspacken bzgl. der SYNTAX:

1, 2, 3  ===> args

args ...   ===> 1, 2, 3 

SYNTAX: Aus args wird eine KOMMA getrennte Liste der Parameter
erzeugt.

Loop: C++ 26: for ...

Auch in C++ 11 : Loop - Nicht als Teil der Sprache.

Sondern mit:  std::initializer_list 

Komma - Operator

===================================================

2 Hilfestellungen:

== Debugger

== Cpp Insights

===================================================

Wozu ????????????????????????????????????

Why ?????????????????????????????????????

A) std::make_unique

B) emplace_back

===================================================

https://www.mythos-nbg.de

std::fill oder for-Schleife ???????

Go for std::fill:

Optimierung: Mit std::memset gut möglich

===================================================

== Smart Pointer

   -- Aufgabe 1
   -- Aufgabe 2
   -- Aufgabe 4   std::weak_ptr

== Variadic Templates

   -- Aufgabe 1
   -- Aufgabe 2

== Aufgaben zu STL-Algorithmen

Test_Generate.cpp
-----------------

   -- Aufgabe 2  // Fibonacci

VariadicTemplate_01_Introduction.cpp
------------------------------------




Was ist Short-Circuit-Evaluation ???

if (a > b || c > d) ...



=========================================================

const

constexpr

constexpr - Anweisungen werden vom Übersetzer ausgeführt.
---------------------------------------------------------

Hilfestellungen:  


===================================================

Weiterleiten von Werten

Perfektes Weiterleiten von Werten

Perfect Forwarding

===================================================


Konzepte (Concepts) und Einschränkungen (Requirements) für Funktionen

===================================================

Structured Binding

C++ 17

std::tie   // kleine Structured Binding - ab C++ 11



Rückgabewert der Funktion mit [[nodiscard]]-Attribut wird verworfen	

// =================================

Donnerstag:

== Folding

== Benutzerdefinierte Literale

== Neue Utility Klassen

== Vergleich (Performanzbetrachtung)
   von statischem Polymorphismus (Templates)
   mit dynamischem Polymorphismus (virtueller Methodenaufrufmechanismus)

   Beispiel „Buchhandlung”

== Safe Programming / Performant:

   Best Practices  // Lint // Resharper

== Multi-Threading

== Ausblick

== friend, overload ...


// WAnn hören wir auf:  16.30 // 16 
