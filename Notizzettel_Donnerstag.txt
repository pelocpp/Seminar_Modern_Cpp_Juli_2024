=====================================

Guten Morgen

C++ für Fortgeschrittene

Donnerstag

Peter Loos

=====================================

== Folding

== Benutzerdefinierte Literale

== Neue Utility Klassen

== Vergleich (Performanzbetrachtung)
   von statischem Polymorphismus (Templates)
   mit dynamischem Polymorphismus (virtueller Methodenaufrufmechanismus)

   Beispiel „Buchhandlung”

== Safe Programming / Performant:

   Best Practices  // Lint // Resharper

== Multi-Threading

== Ausblick

== friend, overload ...

=================================================

== Folding  // Abrollen

Möglichkeit:

Wiederholte Anwendung EINES Operators:

Beispiel:  1 + 2 + 3 + 4 + 5 + 6

   - Kompakte Schreibweise
   - Performanter Code

====================================================

== Vergleich (Performanzbetrachtung)
   von statischem Polymorphismus (Templates)
   mit dynamischem Polymorphismus (virtueller Methodenaufrufmechanismus)

Techniken:

C++:   Go for STL Container

STL Container:

-- Sie verwalten Daten
-- Von welchem Typ sind diese Daten: T -- vom selben Typ

   Homogener Container

   Vererbung:
  
        Zeiger // Container mit Zeigern
   
        // "Unterschiedliche Objekte"

   Heterogener Container

std::variant